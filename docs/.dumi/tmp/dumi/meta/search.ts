// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
// This will bundle all the site demos and meta data into one file
// which should only async load on search
import { getRouteMetaById } from './route-meta';
import { demoIndexes } from './demos';
import { filesFrontmatter } from './frontmatter';

// generate demos data in runtime, for reuse route.id to reduce bundle size
export const demos = {};

/** @private Internal usage. Safe to refactor. */
export async function loadFilesMeta(idList: string[]) {
  const metaMap: Record<string, any> = {};

  if (idList.includes('theme-editor-cn/index')) {
    metaMap['theme-editor-cn/index'] = async () => {
      const routeMeta = await getRouteMetaById('theme-editor-cn/index');
      const demo = await demoIndexes['theme-editor-cn/index']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['theme-editor-cn/index'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('theme-editor/index')) {
    metaMap['theme-editor/index'] = async () => {
      const routeMeta = await getRouteMetaById('theme-editor/index');
      const demo = await demoIndexes['theme-editor/index']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['theme-editor/index'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('index-cn/index')) {
    metaMap['index-cn/index'] = async () => {
      const routeMeta = await getRouteMetaById('index-cn/index');
      const demo = await demoIndexes['index-cn/index']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['index-cn/index'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('index/index')) {
    metaMap['index/index'] = async () => {
      const routeMeta = await getRouteMetaById('index/index');
      const demo = await demoIndexes['index/index']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['index/index'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('_docs/react/contributing.en-US')) {
    metaMap['_docs/react/contributing.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('_docs/react/contributing.en-US');
      const demo = await demoIndexes['_docs/react/contributing.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['_docs/react/contributing.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('_docs/react/contributing.zh-CN')) {
    metaMap['_docs/react/contributing.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('_docs/react/contributing.zh-CN');
      const demo = await demoIndexes['_docs/react/contributing.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['_docs/react/contributing.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('_docs/react/introduce.en-US')) {
    metaMap['_docs/react/introduce.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('_docs/react/introduce.en-US');
      const demo = await demoIndexes['_docs/react/introduce.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['_docs/react/introduce.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('_docs/react/introduce.zh-CN')) {
    metaMap['_docs/react/introduce.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('_docs/react/introduce.zh-CN');
      const demo = await demoIndexes['_docs/react/introduce.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['_docs/react/introduce.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/button/README')) {
    metaMap['components/button/README'] = async () => {
      const routeMeta = await getRouteMetaById('components/button/README');
      const demo = await demoIndexes['components/button/README']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/button/README'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/config-provider/index.en-US')) {
    metaMap['components/config-provider/index.en-US'] = async () => {
      const routeMeta = await getRouteMetaById('components/config-provider/index.en-US');
      const demo = await demoIndexes['components/config-provider/index.en-US']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/config-provider/index.en-US'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/config-provider/index.zh-CN')) {
    metaMap['components/config-provider/index.zh-CN'] = async () => {
      const routeMeta = await getRouteMetaById('components/config-provider/index.zh-CN');
      const demo = await demoIndexes['components/config-provider/index.zh-CN']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/config-provider/index.zh-CN'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/my-component/README')) {
    metaMap['components/my-component/README'] = async () => {
      const routeMeta = await getRouteMetaById('components/my-component/README');
      const demo = await demoIndexes['components/my-component/README']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/my-component/README'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('components/wave/README')) {
    metaMap['components/wave/README'] = async () => {
      const routeMeta = await getRouteMetaById('components/wave/README');
      const demo = await demoIndexes['components/wave/README']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['components/wave/README'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('changelog-cn')) {
    metaMap['changelog-cn'] = async () => {
      const routeMeta = await getRouteMetaById('changelog-cn');
      const demo = await demoIndexes['changelog-cn']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['changelog-cn'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }
  if (idList.includes('changelog')) {
    metaMap['changelog'] = async () => {
      const routeMeta = await getRouteMetaById('changelog');
      const demo = await demoIndexes['changelog']?.getter() || {};
      return {
        frontmatter: filesFrontmatter['changelog'] ?? {},
        toc: routeMeta?.toc ?? [],
        texts: routeMeta?.texts ?? [],
        tabs: routeMeta?.tabs ?? [],
        demos: demo?.demos ?? {},
      };
    };
  }

  // Wait for all meta data to be loaded
  const metaList = await Promise.all(Object.entries(metaMap).map(([id, getter]) => getter()));

  // Merge into filesMeta
  const filesMeta = {};

  Object.entries(metaMap).forEach(([id], index) => {
    filesMeta[id] = metaList[index];
  });

  return filesMeta;
}
