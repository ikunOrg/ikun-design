// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { scopeIndex as scpi0 } from '/Users/liuzhiwei/Desktop/workspeace/git-code/ikun-design/docs/_docs/react/contributing.en-US.md?type=scope-index';
import { scopeIndex as scpi1 } from '/Users/liuzhiwei/Desktop/workspeace/git-code/ikun-design/docs/_docs/react/contributing.zh-CN.md?type=scope-index';
import { scopeIndex as scpi2 } from '/Users/liuzhiwei/Desktop/workspeace/git-code/ikun-design/docs/_docs/react/introduce.en-US.md?type=scope-index';
import { scopeIndex as scpi3 } from '/Users/liuzhiwei/Desktop/workspeace/git-code/ikun-design/docs/_docs/react/introduce.zh-CN.md?type=scope-index';
import { scopeIndex as scpi4 } from '/Users/liuzhiwei/Desktop/workspeace/git-code/ikun-design/packages/core/src/components/button/README.md?type=scope-index';
import { scopeIndex as scpi5 } from '/Users/liuzhiwei/Desktop/workspeace/git-code/ikun-design/packages/core/src/components/config-provider/index.en-US.md?type=scope-index';
import { scopeIndex as scpi6 } from '/Users/liuzhiwei/Desktop/workspeace/git-code/ikun-design/packages/core/src/components/config-provider/index.zh-CN.md?type=scope-index';
import { scopeIndex as scpi7 } from '/Users/liuzhiwei/Desktop/workspeace/git-code/ikun-design/packages/core/src/components/my-component/README.md?type=scope-index';
import { scopeIndex as scpi8 } from '/Users/liuzhiwei/Desktop/workspeace/git-code/ikun-design/packages/core/src/components/wave/README.md?type=scope-index';
import { scopeIndex as scpi9 } from '/Users/liuzhiwei/Desktop/workspeace/git-code/ikun-design/docs/CHANGELOG.zh-CN.md?type=scope-index';
import { scopeIndex as scpi10 } from '/Users/liuzhiwei/Desktop/workspeace/git-code/ikun-design/docs/CHANGELOG.en-US.md?type=scope-index';

const scopeIndexes: Record<string, { ids: string[], getter: () => Promise<any> }> = {
  ...scpi0,
  ...scpi1,
  ...scpi2,
  ...scpi3,
  ...scpi4,
  ...scpi5,
  ...scpi6,
  ...scpi7,
  ...scpi8,
  ...scpi9,
  ...scpi10,
};

/** Async to load demo by id */
export const getDemoScopesById = async (id: string) => {
  const getter = scopeIndexes[id];

  if (!getter) {
    return {};
  }

  const { scopes }: any = await getter() || {};

  return scopes?.[id] || {};
};
